// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: scrayosnet/xenos/profile.proto

package xenos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UuidRequest is the request of the UUID of an individual Minecraft player.
type UuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The case-insensitive username of the Minecraft player, whose UUID is requested.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UuidRequest) Reset() {
	*x = UuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidRequest) ProtoMessage() {}

func (x *UuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidRequest.ProtoReflect.Descriptor instead.
func (*UuidRequest) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{0}
}

func (x *UuidRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// UuidResponse is the response to the request of the UUID of an individual Minecraft player.
type UuidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username of the Minecraft player with corrected capitalization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The UUID of the Minecraft player in its textual form with dashes.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Whether the Minecraft player has not migrated to a Mojang account yet. This is only set if true.
	Legacy bool `protobuf:"varint,3,opt,name=legacy,proto3" json:"legacy,omitempty"`
	// Whether the Minecraft player has not paid for the game yet. This is only set if true.
	Demo bool `protobuf:"varint,4,opt,name=demo,proto3" json:"demo,omitempty"`
}

func (x *UuidResponse) Reset() {
	*x = UuidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidResponse) ProtoMessage() {}

func (x *UuidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidResponse.ProtoReflect.Descriptor instead.
func (*UuidResponse) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{1}
}

func (x *UuidResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UuidResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UuidResponse) GetLegacy() bool {
	if x != nil {
		return x.Legacy
	}
	return false
}

func (x *UuidResponse) GetDemo() bool {
	if x != nil {
		return x.Demo
	}
	return false
}

// UuidsRequest is the batch request of UUIDs of individual Minecraft players.
type UuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The individual requests for the UUIDs. Can be any number of requests.
	Requests []*UuidRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *UuidsRequest) Reset() {
	*x = UuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidsRequest) ProtoMessage() {}

func (x *UuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidsRequest.ProtoReflect.Descriptor instead.
func (*UuidsRequest) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{2}
}

func (x *UuidsRequest) GetRequests() []*UuidRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// UuidsResponse is the response to the batch request of UUIDs of individual Minecraft players.
type UuidsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The individual responses for the UUIDs. A response is given for any request.
	Responses []*UuidResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *UuidsResponse) Reset() {
	*x = UuidsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidsResponse) ProtoMessage() {}

func (x *UuidsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidsResponse.ProtoReflect.Descriptor instead.
func (*UuidsResponse) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{3}
}

func (x *UuidsResponse) GetResponses() []*UuidResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// ProfileRequest is the request of the profile of an individual Minecraft player.
type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the Minecraft player, whose profile is requested, in textual form with dashes.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Whether the properties of the requested profile should be signed.
	Signed string `protobuf:"bytes,2,opt,name=signed,proto3" json:"signed,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProfileRequest) GetSigned() string {
	if x != nil {
		return x.Signed
	}
	return ""
}

// ProfileResponse is the response to the request of the profile of an individual Minecraft player.
type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the Minecraft player in its textual form with dashes.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The username of the Minecraft player.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The properties of the profile of the Minecraft player. Can be any number of properties.
	Properties []*ProfileProperty `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProfileResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileResponse) GetProperties() []*ProfileProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

// ProfileProperty is an individual property of a profile of a Minecraft player.
type ProfileProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the individual property of the profile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the individual property of the profile.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The signature of the individual property value of the profile.
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProfileProperty) Reset() {
	*x = ProfileProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrayosnet_xenos_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileProperty) ProtoMessage() {}

func (x *ProfileProperty) ProtoReflect() protoreflect.Message {
	mi := &file_scrayosnet_xenos_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileProperty.ProtoReflect.Descriptor instead.
func (*ProfileProperty) Descriptor() ([]byte, []int) {
	return file_scrayosnet_xenos_profile_proto_rawDescGZIP(), []int{6}
}

func (x *ProfileProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProfileProperty) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_scrayosnet_xenos_profile_proto protoreflect.FileDescriptor

var file_scrayosnet_xenos_profile_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2f, 0x78, 0x65, 0x6e,
	0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e,
	0x6f, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0c, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x22, 0x49, 0x0a, 0x0c, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x55, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79,
	0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x22, 0x7c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65,
	0x6e, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x59, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xfa, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79,
	0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f,
	0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74,
	0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74,
	0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e,
	0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65,
	0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x78, 0x65, 0x6e, 0x6f, 0x73,
	0x42, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x72,
	0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2f, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x2f, 0x78, 0x65, 0x6e, 0x6f, 0x73, 0xa2, 0x02,
	0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65,
	0x74, 0x2e, 0x58, 0x65, 0x6e, 0x6f, 0x73, 0xca, 0x02, 0x10, 0x53, 0x63, 0x72, 0x61, 0x79, 0x6f,
	0x73, 0x6e, 0x65, 0x74, 0x5c, 0x58, 0x65, 0x6e, 0x6f, 0x73, 0xe2, 0x02, 0x1c, 0x53, 0x63, 0x72,
	0x61, 0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x5c, 0x58, 0x65, 0x6e, 0x6f, 0x73, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x63, 0x72, 0x61,
	0x79, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x3a, 0x3a, 0x58, 0x65, 0x6e, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scrayosnet_xenos_profile_proto_rawDescOnce sync.Once
	file_scrayosnet_xenos_profile_proto_rawDescData = file_scrayosnet_xenos_profile_proto_rawDesc
)

func file_scrayosnet_xenos_profile_proto_rawDescGZIP() []byte {
	file_scrayosnet_xenos_profile_proto_rawDescOnce.Do(func() {
		file_scrayosnet_xenos_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_scrayosnet_xenos_profile_proto_rawDescData)
	})
	return file_scrayosnet_xenos_profile_proto_rawDescData
}

var file_scrayosnet_xenos_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scrayosnet_xenos_profile_proto_goTypes = []interface{}{
	(*UuidRequest)(nil),     // 0: scrayosnet.xenos.UuidRequest
	(*UuidResponse)(nil),    // 1: scrayosnet.xenos.UuidResponse
	(*UuidsRequest)(nil),    // 2: scrayosnet.xenos.UuidsRequest
	(*UuidsResponse)(nil),   // 3: scrayosnet.xenos.UuidsResponse
	(*ProfileRequest)(nil),  // 4: scrayosnet.xenos.ProfileRequest
	(*ProfileResponse)(nil), // 5: scrayosnet.xenos.ProfileResponse
	(*ProfileProperty)(nil), // 6: scrayosnet.xenos.ProfileProperty
}
var file_scrayosnet_xenos_profile_proto_depIdxs = []int32{
	0, // 0: scrayosnet.xenos.UuidsRequest.requests:type_name -> scrayosnet.xenos.UuidRequest
	1, // 1: scrayosnet.xenos.UuidsResponse.responses:type_name -> scrayosnet.xenos.UuidResponse
	6, // 2: scrayosnet.xenos.ProfileResponse.properties:type_name -> scrayosnet.xenos.ProfileProperty
	0, // 3: scrayosnet.xenos.ProfileService.GetUuid:input_type -> scrayosnet.xenos.UuidRequest
	2, // 4: scrayosnet.xenos.ProfileService.GetUuids:input_type -> scrayosnet.xenos.UuidsRequest
	4, // 5: scrayosnet.xenos.ProfileService.GetProfile:input_type -> scrayosnet.xenos.ProfileRequest
	1, // 6: scrayosnet.xenos.ProfileService.GetUuid:output_type -> scrayosnet.xenos.UuidResponse
	3, // 7: scrayosnet.xenos.ProfileService.GetUuids:output_type -> scrayosnet.xenos.UuidsResponse
	5, // 8: scrayosnet.xenos.ProfileService.GetProfile:output_type -> scrayosnet.xenos.ProfileResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_scrayosnet_xenos_profile_proto_init() }
func file_scrayosnet_xenos_profile_proto_init() {
	if File_scrayosnet_xenos_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scrayosnet_xenos_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrayosnet_xenos_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scrayosnet_xenos_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scrayosnet_xenos_profile_proto_goTypes,
		DependencyIndexes: file_scrayosnet_xenos_profile_proto_depIdxs,
		MessageInfos:      file_scrayosnet_xenos_profile_proto_msgTypes,
	}.Build()
	File_scrayosnet_xenos_profile_proto = out.File
	file_scrayosnet_xenos_profile_proto_rawDesc = nil
	file_scrayosnet_xenos_profile_proto_goTypes = nil
	file_scrayosnet_xenos_profile_proto_depIdxs = nil
}
